(contains? nil 10)
(contains? 10 nil)
(contains? (last []) \G))
(contains? (last []) \G)
(contains? (last [[\G]) \G)
(contains? (last [[\G]]) \G)
(contains? [\G] \G)
(contains? [\G] "G")
(= (first [[\G 2]]) \G)
(= (first (last [[\G 2]])) \G)
(rest [1 2 3])
(drop-last 1 2 3])
(drop-last [1 2 3])
((juxt drop-last last) [[\g 2] [\h1]])
((juxt drop-last last) [[\g 2] [\h 1]])
((juxt (comp vector drop-last) last) [[\g 2] [\h 1]])
((juxt (comp (map vector) drop-last) last) [[\g 2] [\h 1]])
((juxt (comp (into vector) drop-last) last) [[\g 2] [\h 1]])
((juxt (comp (map (into vector)) drop-last) last) [[\g 2] [\h 1]])
((juxt (comp (partial map (into vector)) drop-last) last) [[\g 2] [\h 1]])
(peek '('(\g 2))
)
(peek ''(\g 2))
(peek (1 2))
(peek '(1 2))
(seq '(1 2))
(seq 1 2)
(const \g '(\g))
(const \g '(1))
(cons \g '(1))
(cons \g '(\g))
(into str ["a", 1])
(str ["a", 1])
(map str [a", 1])

(map str ["a", 1])
(reduce str ["a" 1])
(remove "1a" "1")
(remove #(= 1 %) [1 "a"])
(filter #(not= "1" %) "1a"))
(filter #(not= "1" %) "1a")
(filter #(not= \1 %) "1a")
(number? "1")
(num "1")
(long "1")
(parse-int "1")
(read-string "1")
(Integer/parseInt "1")
(Integer/parseInt "a")
(re-match #"\d" "1")
(re-find #"\d" "1")
(re-find #"\d" "a")
(re-find #"\d+" "a")
(re-find #"\d+" "11")
(re-find #"\d" "11")
(re-groups #"\d" "11")
(re-groups (re-matcher #"\d" "11"))
(re-groups (re-matcher #"\d" "2b11ca"))
(re-groups (re-matcher #"\d+" "2b11ca"))
(re-matcher #"\d+" "2b11ca")
(def m (re-matcher #"\d+" "2b11ca"))
(re-find m)
(re-groups m)
(re-groups ((re-matcher #"\d+" "2b11ca")))
(re-find ((re-matcher #"\d+" "2b11ca")))
(re-find (re-matcher #"\d+" "2b11ca"))
(re-groups (re-matcher #"\d+" "2b11ca"))
(re-groups (re-matcher #"(\d+)" "2b11ca"))
(re-groups (re-matcher #"\d+" "2b11ca"))
(re-find (re-matcher #"\d+" "2b11ca"))
(re-find (re-matcher #"\d+" "21b11ca"))
(re-find d+" "21b11ca")
(re-find #(d+" "21b11ca")
(re-find #"d+" "21b11ca")
(re-find #"\d+" "21b11ca")
(re-find #"^\d+" "21b11ca")
(re-find #"^\d+" "b11ca")
(re-groups #"\d+" "b11ca")
(re-groups (re-find #"\d+" "b11ca"))
(re-groups (re-matcher #"\d+" "b11ca"))
(re-matches (re-matcher #"\d+" "b11ca"))
(re-matches #"\d+" "b11ca")
(re-matches #"\d+" "1b11ca")
(re-matches #"^\d+" "1b11ca")
(re-matches #"(\d+)" "1b11ca")
(re-find #"(\d+)" "1b11ca")
(re-find #"(\d+[a-z]+)" "1b11ca")
(re-matches #"(\d+[a-z]+)" "1b11ca")
(re-find #"(\d+)([a-z]+)" "1b11ca")
(re-find #"\d" "1b11ca")
(re-find #"\d" "b11ca")
(re-find #"^\d" "b11ca")
(re-find #"^\d" \1)
(re-find #"^\d" (str \1))
(re-find #"^\d" (str \a))
(conj "a" "b")
(str "a" "b")
((partial str "a") "b")
(reverse "ab")
((partial str "a") "b")
((partial str "1") \1)
(repeat 4 "a")
exit
(or ((comp read-string str first) '(\1)) 1)
exit
(or ((comp read-string str first) '()) 1)
(or ((comp read-string str first) '())) 1)
(or ((comp read-string str first) '(\1)) 1)
(or ((comp read-string str first) '()) 1)
(or ((comp read-string str first) '()) 1))
(or ((comp read-string str first) '(nil)) 1)
(or ((comp read-string str first) '(nil))) 1)
((comp read-string str first) '(nil)
)
((comp read-string str first) (list))
((comp read-string str first) [])
(comp read-string str first [])
(comp read-string str first)
((comp read-string str first) '("a"))
((comp read-string str first) '())
((comp read-string str first) [])
((comp read-string str first) ([]))
((comp read-string str first) (vector))
(repeat nil "a")
(repeat 1 "a")
exit
(cons [1] [2])
(cons '(1) '(2))
(cons 1 (2))
(cons 1 '(2))
exit
(ffirst [[1]]])
(ffirst [[1]]]
(ffirst [[1]])
(conj [1] 1)
(conj [1] 1
)
(conj [1] 2)
(first [1])
(rest [1,2,3])
(pop [1 2 3])
(peek [1 2 3])
(lfirst [[1], [2]])
(peek (peek [[1], [2]])
)
([])
('[])
'[]
(vector vector)
(vector '[])
(conj 1 [2])
(conj [2] 1)
exit
(peek (peek 
'[]))
t
exit
(vector)
t
exit
((juxt peek count) '[1 1])
(map (juxt peek count) [["A" "A"] ["
])
(map (juxt peek count) '['["A" "A"] '["B"]])
(map (juxt peek count) '['["a" "A"] '["B"]])
(map (juxt peek count) '['["a" "A] '["B"]])
(map (juxt peek count) '['["a" "a"] '["B"]])
(map (juxt peek count) '['["a", "a"] '["B"]])
(map (juxt peek count) '['[\A \A] '["B"]])
(map (juxt count peek) '['[\A \A] '["B"]])
(map join (map (juxt count peek) '['[\A \A] '["B"]])
)
(map clojure.string/join (map (juxt count peek) '['[\A \A] '["B"]])
)
exit
(re-find #"^1\w" "1A")
(re-find #"^1\w" "11A")
(re-find #"^1[\w]" "11A")
(re-find #"^1[^\d]" "1A")
(re-find #"^1[^\d]" "11A")
(re-find #"^1[\w]" "11A")
(re-find #"^1[^\d]" "11A")
(rest "asdf")
(subs "asdf" 1 3)
(subs "asdf" 1 -1)
(subs "asdf" 1 (count "asdf"))
exit
(first "ab")
(rest "abc")
(subs "a" 0 1)
t
exit
(vector (vector (subs "abc" 0 1)))
(peek (peek (vector (vector (subs "abc" 0 1)))
))
exit
