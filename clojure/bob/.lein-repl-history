(#{ "me" })
#{ "me" }
(#{} "me")
#{ "me" "me" }
(conj #{"me"} "you")
(conj #{"me"} "me")
(re-seq #"[a-z]" "ME")
(re-seq #"[a-z]" "me")
(apply str(re-seq #"[a-z]" "me"))
(apply str(re-seq #"[a-z]" "1, 2, 3!"))
(and true true)
(re-matches #"[a-z]" "me")
(re-matches #"[a-z]" "ME")
(re-find #"[a-z]" "ME")
(re-find "ME" #"[a-z]")
(re-find #"[a-z]" "a")
(re-find #"[a-z]" "b")
(re-find #"[a-z]" "ba")
(re-find #"[a-z]" "me")
(re-matches #"[a-z]" "me")
(re-matches #"[a-z]" "a")
(re-matches #"[a-z]" "me")
(defn- has-letters? [s] (not (empty? (re-find #"[a-zA-Z]" s))))
(has-letters? "me")
(has-letters? "1, 2, 3, !")
t
exit
(= #{"a" "b"} #{"b" "a"}
)
exit
(conj #{} nil)
(filter identity (conj #{} nil))
exit
